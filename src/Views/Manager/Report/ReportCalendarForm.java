/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views.Manager.Report;


import Section.CreateSection;
import Section.DesignSection;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.time.Year;
import java.time.YearMonth;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author Eunar B. Dayangco
 */
public class ReportCalendarForm extends javax.swing.JFrame {

    /**
     * Creates new form ReportCalendarForm
     */
    private Calendar cal;
    private static final int CURRENT_YEAR = Year.now().getValue();
    private static final int CURRENT_MONTH = YearMonth.now().getMonthValue();
    private static final int CURRENT_DATE = Calendar.getInstance().getTime().getDate();
    private ManagerReportInfo reportInfo;
    
    private static int monthCount;
    
    public ReportCalendarForm() {
        initComponents();
        init();
        new DesignSection().designForm(this, mainPanel, "mini");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        yearList = new javax.swing.JComboBox<>();
        year = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        lblMonthYear = new javax.swing.JLabel();
        prevbtn = new javax.swing.JButton();
        nextbtn = new javax.swing.JButton();
        callTableScrollPane = new javax.swing.JScrollPane();
        calTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        mainPanel.setBackground(new java.awt.Color(204, 0, 0));
        mainPanel.setOpaque(false);

        yearList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024" }));
        yearList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                yearListItemStateChanged(evt);
            }
        });
        yearList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearListActionPerformed(evt);
            }
        });

        year.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        jPanel2.setBackground(new java.awt.Color(255, 102, 0));
        jPanel2.setLayout(null);

        lblMonthYear.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblMonthYear.setForeground(new java.awt.Color(0, 0, 0));
        lblMonthYear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMonthYear.setText("October 2018");
        jPanel2.add(lblMonthYear);
        lblMonthYear.setBounds(131, 0, 190, 30);

        prevbtn.setBackground(new java.awt.Color(0, 204, 204));
        prevbtn.setForeground(new java.awt.Color(0, 0, 0));
        prevbtn.setText("<<");
        prevbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevbtnActionPerformed(evt);
            }
        });
        jPanel2.add(prevbtn);
        prevbtn.setBounds(0, 0, 60, 30);

        nextbtn.setBackground(new java.awt.Color(0, 204, 204));
        nextbtn.setForeground(new java.awt.Color(0, 0, 0));
        nextbtn.setText(">>");
        nextbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextbtnActionPerformed(evt);
            }
        });
        jPanel2.add(nextbtn);
        nextbtn.setBounds(390, 0, 60, 30);

        callTableScrollPane.setBorder(null);
        callTableScrollPane.setOpaque(false);

        calTable.setBackground(new java.awt.Color(255, 255, 255));
        calTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"
            }
        ));
        calTable.setOpaque(false);
        calTable.setSelectionBackground(new java.awt.Color(51, 153, 0));
        calTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                calTableMouseClicked(evt);
            }
        });
        callTableScrollPane.setViewportView(calTable);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(callTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(71, 71, 71)
                                .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(yearList, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(callTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(88, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void yearListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_yearListItemStateChanged

    }//GEN-LAST:event_yearListItemStateChanged

    private void yearListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearListActionPerformed

    }//GEN-LAST:event_yearListActionPerformed

    private void prevbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevbtnActionPerformed
        decreaseMonth();
        displayMonthYear();
        displayOnTable();
    }//GEN-LAST:event_prevbtnActionPerformed

    private void nextbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextbtnActionPerformed

        increaseMonth();
        displayMonthYear();
        displayOnTable();

    }//GEN-LAST:event_nextbtnActionPerformed

    private void calTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_calTableMouseClicked
        
        int year = Integer.parseInt(yearList.getSelectedItem().toString());
        int month = ReportCalendarForm.monthCount;
        int rows = calTable.getSelectedRow();
        int cols = calTable.getSelectedColumn();
        int day = Integer.parseInt(calTable.getValueAt(rows, cols).toString());
        
        this.reportInfo.dispose();
        this.reportInfo = new ManagerReportInfo(month, day, year);
        this.reportInfo.setVisible(true);
        
        
        
        //CreateSection.displayInfoMessage("Date", getDateSelected());
    }//GEN-LAST:event_calTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReportCalendarForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReportCalendarForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReportCalendarForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReportCalendarForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReportCalendarForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable calTable;
    private javax.swing.JScrollPane callTableScrollPane;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblMonthYear;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton nextbtn;
    private javax.swing.JButton prevbtn;
    private javax.swing.JComboBox<String> year;
    private javax.swing.JComboBox<String> yearList;
    // End of variables declaration//GEN-END:variables

     public void init(){
        
        this.cal = Calendar.getInstance();
        displayYearList();
        ReportCalendarForm.monthCount = ReportCalendarForm.CURRENT_MONTH;
        displayMonthYear();
        displayOnTable();
        setTableRender();
        this.reportInfo = new ManagerReportInfo();
    }
    
    public String getMonth(int num){
        
        String month = "";
        switch(num){
            
            case 1:month = "January"; break;
            case 2:month = "February"; break;
            case 3:month = "March"; break;
            case 4:month = "April"; break;
            case 5:month = "May"; break;
            case 6:month = "June"; break;
            case 7:month = "July"; break;
            case 8:month = "August"; break;
            case 9:month = "September"; break;
            case 10:month = "October"; break;
            case 11:month = "November"; break;
            case 12:month = "December"; break;
            default:month="";
        }
        
        return month;
    }
    public void displayMonthYear(){
        
        String month = getMonth(ReportCalendarForm.monthCount);
        lblMonthYear.setText(month+" "+getSelectedYear());  
    }
    public void increaseMonth(){
        
        
        if(ReportCalendarForm.monthCount != 12){
            
            ReportCalendarForm.monthCount++;
        }
    }
    
    public int getSelectedYear(){
        return Integer.parseInt(yearList.getSelectedItem().toString());
    }
    
    public void decreaseMonth(){
     
        if(ReportCalendarForm.monthCount != 1){
            
            ReportCalendarForm.monthCount--;
        }
    }
    
    
    public int getDaysInMonth(int year,int month){
        YearMonth yearMonth = YearMonth.of(year, month);
        return yearMonth.lengthOfMonth();
    }
    
    public int getFirstday(int year,int month){
        this.cal.set(year, month-1, 1);
        Date firstDayOfTheMonth = cal.getTime();
        
        return firstDayOfTheMonth.getDay();
    }
    
    public void displayOnTable(){
        
        int year = getSelectedYear();        
        int month = ReportCalendarForm.monthCount;
        int numdays = getDaysInMonth(year, month);
        int beforedays = getFirstday(year,month);
        
        DefaultTableModel model = (DefaultTableModel)calTable.getModel();
        model.setRowCount(0);
        Object[] cols = new Object[7];
        Object[] rows = new Object[numdays/7];
        int day = 1;
        
        
        for(int x = 1; x<=6; x++){
            
            int startday = 0;
            
            if(x == 1){
                startday = beforedays;
            }
            
            
            for(int y = startday; y<cols.length; y++){
               
               if(day <= numdays){
                    cols[y] = day;
                      
                   day++;
               }else{
                   cols[y] = "";
               }
              
            }
            
            model.addRow(cols);
        }
        
    }
    
    public String getCurrentDate(){
        
        String date = ReportCalendarForm.CURRENT_MONTH+"/"+
                ReportCalendarForm.CURRENT_DATE+"/"+ReportCalendarForm.CURRENT_YEAR;
        
        return date;
    }
    
    public void displayYearList(){
        
        yearList.removeAllItems();
        
        int startyear = Year.now().getValue()-10;
        int endList = startyear+10;
        
        for(int x = startyear; x<=endList; x++){
            yearList.addItem(x+"");
        }
         yearList.setSelectedItem(Year.now().getValue()+"");
    }
    
    public void setTableRender(){
        
         JTableHeader header = calTable.getTableHeader();
          header.setFont(new Font("Dialog", Font.BOLD, 14));
          
          
          header.setBackground(new Color(255,204,0));
          header.setForeground(Color.BLACK);
          header.setPreferredSize(new Dimension(0,30));
          
           
        
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
              
                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
               
                JLabel label = (JLabel)c;
                label.setVerticalAlignment(SwingConstants.CENTER);
                label.setHorizontalAlignment(SwingConstants.CENTER);
                label.setFont(new Font("Dialog", Font.BOLD, 30));
                table.setRowHeight(55);
               
                
                JButton button = new JButton(value+"");
                button.setFont(new Font("Dialog", Font.BOLD, 20));
                button.setContentAreaFilled(true);
                
                String date = ReportCalendarForm.monthCount+"/"+value+"/"+getSelectedYear();
                int rows = table.getSelectedRow();
                int cols = table.getSelectedColumn();
                
               
             
               
                if(row == rows && column == cols){
                    button.setBackground(Color.red);
                    button.setForeground(Color.white);
                }else{
                    
                      if(date.equals(getCurrentDate())){
                        button.setBackground(Color.green);
                        button.setForeground(Color.black);
                      }else{
                        button.setBackground(new Color(10,10,10,100));
                        button.setForeground(Color.white);
                      }
               }
                
                
                if(value==null){
                    value = "";
                    button.setText(value.toString());
                }
                

                
                
                return button;
            }
            
            
        };
        
        calTable.setDefaultRenderer(Object.class, renderer);
        callTableScrollPane.setOpaque( false );
        callTableScrollPane.getViewport().setOpaque( false );
        calTable.setOpaque(false);
        
        
        
       // callTableScrollPane.setSize(calTable.getWidth(), 180+23);
    }
    
    public String getDateSelected(){
        int year = Integer.parseInt(yearList.getSelectedItem().toString());
        int month = ReportCalendarForm.monthCount;
        int rows = calTable.getSelectedRow();
        int cols = calTable.getSelectedColumn();
        int day = Integer.parseInt(calTable.getValueAt(rows, cols).toString());
        
        return getMonth(month) + " "+day+", "+year;
    }
    
    public void receivedValue(Object receiver){
        
        if(receiver instanceof JTextField){
            ((JTextField)receiver).setText(getDateSelected());
        }
        else if(receiver instanceof JLabel){
            ((JLabel)receiver).setText(getDateSelected());
        }
    }

}
